{"version":3,"sources":["redux/reducers/index.js","redux/actions/setActions.js","components/TypeBadge.js","components/PartyListItem.js","components/PartyDetail.js","components/PartyList.js","components/BattleItem.js","components/BattlePage.js","components/MatchMaking.js","components/CoverPage.js","auth/fire.js","App.js","serviceWorker.js","index.js"],"names":["initialState","currentUser","partyDetail","session_id","gamestate","order","rootReducer","state","action","type","pokemon","user","ordered","setCurrentUser","setSessionID","setPartyDetail","TypeBadge","props","styles","display","justifyContent","alignItems","padding","marginBottom","width","height","backgroundColor","typeColor","color","border","borderRadius","style","charAt","toUpperCase","slice","PartyListItem","dispatch","useDispatch","totalLevel","Object","values","stats","reduce","accumulator","stat","containerStyles","types","map","index","key","flexDirection","margin","fontSize","length","backgroundImage","cursor","onClick","name","formattedName","src","sprite","front","alt","PartyDetail","typeBadges","statChartData","value","hp","attack","defense","speed","overflow","userSelect","paddingTop","borderRight","id","marginTop","flex","data","dataKey","domain","fill","PartyList","selectedDetail","useSelector","partyListItems","PokemonData","transform","gridTemplateColumns","justifyItems","pokemon_id","poke_id","meta","remote","user_id","uid","swap","console","log","BattlePage","useState","ready","myListContainerStyles","myParty","players","party","filter","alive","sortableParty","setSortableParty","theirParty","keys","player","sendOrder","party_order","theirPartyListItems","BattleItem","myPartyListItems","list","setList","Button","variant","uuid","require","MatchMaking","prop","myCode","theirCode","setValues","inputStyles","to","makeLobby","placeholder","onChange","event","target","enterLobby","CoverPage","textAlign","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","AuthContext","createContext","App","loggedIn","setLoggedIn","setCurrentUserInState","useEffect","document","body","onAuthStateChanged","metadata","creationTime","lastSignInTime","axios","method","url","headers","Provider","signOut","signInWithRedirect","className","path","exact","component","Boolean","window","location","hostname","match","socket","socketIO","connect","store","createStore","applyMiddleware","socketIoMiddleware","getElementById","ReactDOM","render","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63b729fe.chunk.js","sourcesContent":["\nconst initialState = {\n\n    currentUser: null,\n\n    partyDetail: null,\n\n    session_id: null,\n\n    gamestate: null,\n\n    order: false\n};\n\nconst rootReducer = ( state = initialState, action ) => {\n\n    if ( action.type === 'lobby-ready' ) {\n\n        return {\n            ...state,\n            gamestate: action.state,\n        }\n    }\n\n    if ( action.type === 'all-players-ordered' ) {\n\n        return {\n            ...state,\n            gamestate: action.state,\n        }\n    }\n\n    if ( action.type === 'battle-complete' ) {\n\n        return {\n            ...state,\n            gamestate: action.state,\n        }\n    }\n\n    if ( action.type === 'game-over' ) {\n\n        return {\n            ...state,\n            gamestate: action.state,\n        }\n    }\n\n    if ( action.type === 'SET_PARTY_DETAIL' ) {\n\n        return {\n            ...state,\n            partyDetail: action.pokemon,\n        }\n    }\n\n    if ( action.type === 'SET_GAME_STATE' ) {\n\n        return {\n            ...state,\n            gamestate: action.state,\n        }\n    }\n\n    if ( action.type === 'SET_CURRENT_USER' ) {\n\n        return {\n            ...state,\n            currentUser: action.user,\n        }\n    }\n\n    if ( action.type === 'SET_SESSION_ID' ) {\n\n        return {\n            ...state,\n            session_id: action.session_id,\n        }\n    }\n\n    if ( action.type === 'SET_ORDERED' ) {\n\n        return {\n            ...state,\n            ordered: true,\n        }\n    }\n\n    return state;\n};\n\nexport default rootReducer;\n","\nexport const setCurrentUser = user => {\n\n    return {\n        type: 'SET_CURRENT_USER',\n        user: user\n    }\n};\n\nexport const setSessionID = session_id => {\n\n    return {\n        type: 'SET_SESSION_ID',\n        session_id: session_id\n    }\n};\n\nexport const setPartyDetail = pokemon => {\n\n    return {\n        type: 'SET_PARTY_DETAIL',\n        pokemon: pokemon\n    }\n};\n\nexport const setGameState = state => {\n\n    return {\n        type: 'SET_GAME_STATE',\n        state: state\n    }\n};\n\nexport const setOrdered = () => {\n\n    return {\n        type: 'SET_ORDERED',\n    }\n};\n\nexport const sendPickOrder = data => {\n\n    return {\n        type: 'send-pick-order',\n        meta: { remote: true },\n        data\n    }\n};\n\nexport const readyUp = data => {\n\n    return {\n        type: 'ready-up',\n        meta: { remote: true },\n        data\n    }\n};\n\nexport const swapPokemon = data => {\n\n    return {\n        type: 'swap-pokemon',\n        meta: { remote: true },\n        data\n    }\n};\n\nexport const createLobby = data => {\n\n    return {\n        type: 'create-lobby',\n        meta: { remote: true },\n        data\n    }\n};\n\nexport const joinLobby = data => {\n\n    return {\n        type: 'join-lobby',\n        meta: { remote: true },\n        data\n    }\n};\n\n\n","import React from 'react';\n\nfunction TypeBadge ( props ) {\n\n    const typeColor = () => {\n\n      switch ( props.type ) {\n\n          case 'normal': return '#A8A878';\n          case 'fighting': return '#C03028';\n          case 'flying': return '#A890F0';\n          case 'poison': return '#A040A0';\n          case 'ground': return '#E0C068';\n          case 'rock': return '#B8A038';\n          case 'bug': return '#A8B820';\n          case 'ghost': return '#705898';\n          case 'steel': return '#B8B8D0';\n          case 'fire': return '#F08030';\n          case 'water': return '#6890F0';\n          case 'grass': return '#78C850';\n          case 'electric': return '#F8D030';\n          case 'psychic': return '#F85888';\n          case 'ice': return '#98D8D8';\n          case 'dragon': return '#7038F8';\n          case 'dark': return '#705848';\n\n          default: return '#FFFFFF';\n      }\n    };\n\n    const formattedType = () => {\n\n        return props.type.charAt(0).toUpperCase() + props.type.slice(1);\n    };\n\n    const styles = {\n\n        // positioning\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '1em',\n        marginBottom: '0.5em',\n\n        // sizing\n        width: '3.7em',\n        height: '0.5em',\n\n        // styling\n        backgroundColor: typeColor(),\n        color: 'white',\n        border: '2px solid black',\n        borderRadius: '1em'\n    };\n\n    return(\n        <div style={ styles }>\n            { formattedType() }\n        </div>\n    );\n}\n\nexport default TypeBadge;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setPartyDetail } from \"../redux/actions/setActions\";\n\nimport TypeBadge from './TypeBadge';\n\nfunction PartyListItem ( props ) {\n\n\n    const dispatch = useDispatch();\n\n\n    const formattedName = () => {\n\n        const name = props.pokemon.name;\n\n        return name.charAt(0).toUpperCase() + name.slice(1);\n    };\n\n    const typeColor = type => {\n\n        switch ( type ) {\n\n            case 'normal': return '#A8A878';\n            case 'fighting': return '#C03028';\n            case 'flying': return '#A890F0';\n            case 'poison': return '#A040A0';\n            case 'ground': return '#E0C068';\n            case 'rock': return '#B8A038';\n            case 'bug': return '#A8B820';\n            case 'ghost': return '#705898';\n            case 'steel': return '#B8B8D0';\n            case 'fire': return '#F08030';\n            case 'water': return '#6890F0';\n            case 'grass': return '#78C850';\n            case 'electric': return '#F8D030';\n            case 'psychic': return '#F85888';\n            case 'ice': return '#98D8D8';\n            case 'dragon': return '#7038F8';\n            case 'dark': return '#705848';\n\n            default: return '#FFFFFF';\n        }\n    };\n\n    // Sum of all stats, which is what ultimately influences chances in battle\n    const totalLevel = Object.values(props.pokemon.stats)\n            .reduce( ( accumulator, stat ) => accumulator + stat );\n\n    const typeBadges = props.pokemon.types\n        .map( ( type, index ) =>\n            <TypeBadge\n                key={ index }\n                type={ type } /> );\n\n    /*\n     * Render either single-color or dual-color background depending on\n     * whether pokemon has 1 or 2 types\n     */\n    const backgroundColor = () => {\n\n        const types = props.pokemon.types;\n\n        return types.length > 1 ?\n            { backgroundImage: `-webkit-linear-gradient(30deg, ${ typeColor(types[0]) } 50%, ${ typeColor(types[1]) } 50%)` }\n            : { backgroundColor: typeColor(types[0]) }\n    };\n\n\n    const containerStyles = {\n\n        // positioning\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '1em',\n        margin: '.5em',\n\n        // sizing\n        width: '10em',\n\n        // styling\n        border: '2px solid black',\n        borderRadius: '1em',\n        fontSize: '1.5em',\n        ...backgroundColor(),\n\n        // other\n        cursor: 'pointer'\n    };\n\n    return(\n        <div\n            style={ containerStyles }\n            onClick={ () => dispatch( setPartyDetail( props.pokemon ) ) }>\n\n            <span style={{ marginBottom: '.5em'}}>{ formattedName() }</span>\n\n            { `CP: ${ totalLevel }` }\n\n            <img\n                src={ props.pokemon.sprite.front }\n                alt=\"Pokemon Sprite\"\n                width=\"50%\"\n                height=\"auto\"/>\n\n        </div>\n    );\n}\n\nexport default PartyListItem;\n\n\n\n","import React from 'react';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip } from 'recharts';\n\nimport TypeBadge from './TypeBadge';\n\nfunction PartyDetail ( props ) {\n\n\n    const formattedName = () => {\n\n        const name = props.pokemon.name;\n\n        return name.charAt(0).toUpperCase() + name.slice(1);\n    };\n\n\n    const typeBadges = props.pokemon.types\n        .map( ( type, index ) =>\n            <TypeBadge\n                key={ index }\n                type={ type }/>\n        );\n\n    // Pokemon stats formatted as chart data\n    const statChartData = [\n\n        {\n            name: \"HP\",\n            value: props.pokemon.stats.hp\n        },\n        {\n            name: \"Attack\",\n            value: props.pokemon.stats.attack\n        },\n        {\n            name: \"Defense\",\n            value: props.pokemon.stats.defense\n        },\n        {\n            name: \"Sp. Attack\",\n            value: props.pokemon.stats['special-attack']\n        },\n        {\n            name: \"Sp. Defence\",\n            value: props.pokemon.stats['special-defense']\n        },\n        {\n            name: \"Speed\",\n            value: props.pokemon.stats.speed\n        }\n    ];\n\n\n    const containerStyles = {\n\n        // positioning\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n\n        // sizing\n        width: '100%',\n\n        // styling\n        backgroundColor: '#c5c5c5',\n        border: '2px solid black',\n        borderRadius: '1em',\n\n        // other\n        overflow: 'hidden',\n        userSelect: 'none'\n\n\n\n    };\n\n    const infoContainerStyles = {\n\n        // positioning\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '1.25em',\n\n        // sizing\n        width: '25%',\n        height: '100%',\n\n        // styling\n        backgroundColor: '#c5c5c5',\n        borderRight: '2px solid black'\n    };\n\n    const statsContainerStyles = {\n\n        // positioning\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '1.25em',\n\n        // sizing\n        height: '100%',\n        flex: '1',\n\n        // styling\n        backgroundColor: '#c5c5c5'\n    };\n\n\n    const typeBadgeContainerStyles = {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '60%',\n        marginTop: '1em'\n    };\n\n\n    return (\n\n        <div style={ containerStyles } >\n\n            <div style={ infoContainerStyles }>\n                <span style={{ fontSize: '2em' }}>{`#${ props.pokemon.id } ${ formattedName() }`}</span>\n\n                <div style={ typeBadgeContainerStyles }>\n                    { typeBadges }\n                </div>\n\n                <img\n                    src={ props.pokemon.sprite.front }\n                    alt=\"Pokemon Sprite\"\n                    width=\"75%\"\n                    height=\"auto\"/>\n            </div>\n\n            <div style={ statsContainerStyles }>\n                <ResponsiveContainer>\n                    <BarChart data={ statChartData }>\n                        <XAxis dataKey=\"name\" />\n                        <YAxis type=\"number\" domain={ [0, 200] } />\n                        <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                        <Tooltip cursor={{fill: 'transparent'}} />\n                    </BarChart>\n                </ResponsiveContainer>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default PartyDetail;\n","import React from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nimport PartyListItem from './PartyListItem';\nimport PartyDetail from './PartyDetail';\n\nimport PokemonData from '../pokemon.json';\nimport PCList from './PCList';\n\nimport BattleButtons from './BattleButtons';\n\n\n\n // List of <PartyListItems/> representing the 6 pokemon in the party\nfunction PartyList ( ) {\n\n\n    // Retrieve selected pokemon from global state\n    const selectedDetail = useSelector( state => state.partyDetail );\n\n    // Substitute for database interaction\n    const party = [\n\n        PokemonData[388],\n        PokemonData[149],\n        PokemonData[142],\n        PokemonData[286],\n        PokemonData[7],\n        PokemonData[102]\n\n\n    ];\n\n    /*\n    axios({\n      method: 'get',\n      url: 'http://cloudfunction.com/',\n      responseType: 'stream'\n    })\n      .then(function (response) {\n        response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n      });\n    */\n    // https://pokemon-412.appspot.com/retrievepokemon?username=spencer\n\n    const partyListItems = party\n        .map( ( pokemon, index ) =>\n            <PartyListItem\n                key={ index }\n                pokemon={ pokemon }/>\n        );\n\n    const containerStyles = {\n\n        // positioning\n        display: 'flex',\n        flexDirection: 'column',\n\n        width: '60vw',\n        height: '90vh'\n    };\n\n\n    const listContainerStyles = {\n\n        display: 'grid',\n        gridTemplateColumns: 'repeat(3, 1fr)',\n        justifyItems: 'center',\n    };\n\n    const scaleView ={\n        transform: 'scale(0.9)',\n\n    };\n\n    return(\n        <div>\n            \n            <div style={ scaleView }>\n                \n                <div style={ containerStyles }>\n\n                \n                    <div style={ listContainerStyles }>\n                        { partyListItems }\n                    </div>\n                    { /* Render conditionally based on whether a pokemon has been selected yet (selectedDetail != null) */ }\n                    { selectedDetail && <PartyDetail pokemon={ selectedDetail }/> }\n                </div>\n\n            </div>\n        </div>\n\n        \n\n    );\n}\n\nexport default PartyList;\n","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport { swapPokemon } from \"../redux/actions/setActions\";\n\nimport TypeBadge from './TypeBadge';\n\nfunction PartyListItem ( props ) {\n\n\n    const dispatch = useDispatch();\n\n    const ordered = useSelector( state => state.ordered );\n    const session_id = useSelector( state => state.session_id );\n    const currentUser = useSelector( state => state.currentUser );\n\n\n    const formattedName = () => {\n\n        const name = props.pokemon.name;\n\n        return name.charAt(0).toUpperCase() + name.slice(1);\n    };\n\n    const typeColor = type => {\n\n        switch ( type ) {\n\n            case 'normal': return '#A8A878';\n            case 'fighting': return '#C03028';\n            case 'flying': return '#A890F0';\n            case 'poison': return '#A040A0';\n            case 'ground': return '#E0C068';\n            case 'rock': return '#B8A038';\n            case 'bug': return '#A8B820';\n            case 'ghost': return '#705898';\n            case 'steel': return '#B8B8D0';\n            case 'fire': return '#F08030';\n            case 'water': return '#6890F0';\n            case 'grass': return '#78C850';\n            case 'electric': return '#F8D030';\n            case 'psychic': return '#F85888';\n            case 'ice': return '#98D8D8';\n            case 'dragon': return '#7038F8';\n            case 'dark': return '#705848';\n\n            default: return '#FFFFFF';\n        }\n    };\n\n    // Sum of all stats, which is what ultimately influences chances in battle\n    const totalLevel = Object.values(props.pokemon.stats)\n            .reduce( ( accumulator, stat ) => accumulator + stat );\n\n    const typeBadges = props.pokemon.types\n        .map( ( type, index ) =>\n            <TypeBadge\n                key={ index }\n                type={ type } /> );\n\n    /*\n     * Render either single-color or dual-color background depending on\n     * whether pokemon has 1 or 2 types\n     */\n    const backgroundColor = () => {\n\n        const types = props.pokemon.types;\n\n        return types.length > 1 ?\n            { backgroundImage: `-webkit-linear-gradient(30deg, ${ typeColor(types[0]) } 50%, ${ typeColor(types[1]) } 50%)` }\n            : { backgroundColor: typeColor(types[0]) }\n    };\n\n\n    const containerStyles = {\n\n        // positioning\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '1em',\n        margin: '.5em',\n\n        // sizing\n        width: '10em',\n\n        // styling\n        border: '2px solid black',\n        borderRadius: '1em',\n        fontSize: '1.5em',\n        ...backgroundColor(),\n\n        // other\n        cursor: 'pointer'\n    };\n\n    const sendSwap = ( pokemon_id ) => {\n        if ( ordered ) dispatch( swapPokemon( { session_id: session_id, user_id: currentUser.uid, swap: pokemon_id } ) );\n        console.log('CLICKED FOR SWAP');\n    };\n\n    return(\n        <div\n            style={ containerStyles }\n            onClick={ () => sendSwap( props.poke_id ) }>\n\n            <span style={{ marginBottom: '.5em'}}>{ formattedName() }</span>\n\n            { `CP: ${ totalLevel }` }\n\n            <img\n                src={ props.pokemon.sprite.front }\n                alt=\"Pokemon Sprite\"\n                width=\"50%\"\n                height=\"auto\"/>\n\n        </div>\n    );\n}\n\nexport default PartyListItem;\n\n\n\n","\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nimport BattleItem from './BattleItem';\nimport { ReactSortable } from \"react-sortablejs\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendPickOrder, readyUp, setOrdered } from '../redux/actions/setActions';\n\nfunction BattlePage ( props ){\n\n\tconst dispatch = useDispatch();\n\n\tconst session_id = useSelector( state => state.session_id );\n\n\tconst currentUser = useSelector( state => state.currentUser );\n\n\tconst ordered = useSelector( state => state.ordered );\n\n\tconst [ ready, setReady ] = useState( false );\n\n\tconst style = {\n\t\tmargin: '1em',\n\t\tpadding: '.5em',\n\t\tfontSize: '32px'\n\t};\n\n    const theirListContainerStyles = {\n\n        display: 'grid',\n        gridTemplateColumns: 'repeat(3, 1fr)',\n        justifyItems: 'center',\n    };\n\n    const myListContainerStyles = {\n\n        display: 'flex',\n        justifyItems: 'center',\n    };\n\n    const gamestate = useSelector( state => state.gamestate );\n\n    const myParty = gamestate.players[ currentUser.uid ].party.filter( pokemon => pokemon.alive );\n\n\tconst [ sortableParty, setSortableParty ] = useState( myParty );\n\n\tconst theirParty = gamestate.players[ Object.keys( gamestate.players ).filter( player => player !== currentUser.uid ) ].party.filter( pokemon => pokemon.alive );\n\n\tconst sendOrder = () => {\n\t\tdispatch( sendPickOrder( { session_id: session_id, user_id: currentUser.uid, party_order: sortableParty } ) );\n\t\tdispatch( setOrdered() );\n\t};\n\n\tconst sendReady = () => {\n\t\tdispatch( readyUp( { session_id: session_id, user_id: currentUser.uid } ) );\n\t};\n\n    const theirPartyListItems = theirParty\n        .map( ( pokemon, index ) =>\n            <BattleItem\n                key={ index }\n                pokemon={ pokemon }/>\n        );\n\n\tconst myPartyListItems = myParty\n        .map( ( pokemon, index ) =>\n            <BattleItem\n                key={ index }\n                pokemon={ pokemon }\n\t\t\t\tpoke_id={ pokemon.pokemon_id }/>\n        );\n\n\n    const scaleView = {\n        transform: 'scale(0.7)',\n    };\n\n\treturn (\n            <div style={scaleView}>\n\t\t\t\t<span style={ { fontSize: '48px' } }>Opponent's Party</span>\n\t\t        <div style={ theirListContainerStyles }>\n\t\t            { theirPartyListItems }\n\t\t        </div>\n\t\t        <h1>\n\t\t\t\t\t{\n\t\t\t\t\t\t( myParty.length && theirParty.length ) ?\n\t\t\t\t\t\t\t'VS'\n\t\t\t\t\t\t\t: myParty.length ?\n\t\t\t\t\t\t\t\t'You Win!'\n\t\t\t\t\t\t\t\t: 'You Lose!'\n\t\t\t\t\t}\n\t\t\t\t</h1>\n\t\t\t\t{!ordered &&\n\t\t\t\t\t<ReactSortable list={sortableParty} setList={setSortableParty} style={myListContainerStyles}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsortableParty.map((pokemon, index) =>\n\t\t\t\t\t\t\t\t<BattleItem\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tpokemon={pokemon}/>)\n\t\t\t\t\t\t}\n\t\t\t\t\t</ReactSortable>}\n\t\t\t\t{ ordered && <div style={myListContainerStyles}>{ myPartyListItems }</div> }\n\t\t\t\t<span style={ { fontSize: '48px' } }>My Party</span><br/>\n\n\t\t\t\t{ !ordered ?\n\t\t\t\t\t<Button variant=\"danger\" style= {style} onClick={ () => sendOrder() }>Start Fight</Button>\n\t\t\t\t\t: !ready ?\n\t\t\t\t\t\t<Button variant=\"danger\" style= {style} onClick={ () => sendReady() }>Ready Up</Button>\n\t\t\t\t\t\t: <Button variant=\"disabled\" style= {style} onClick={ () => sendOrder() }>Awaiting Opponent</Button>\n\t\t\t\t}\n\t\t    </div>\n\n\t)\n}\n\nexport default BattlePage;\n","import React, { useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { createLobby, joinLobby, setSessionID } from '../redux/actions/setActions'\n\nimport { Redirect } from 'react-router-dom';\n\nimport Button from \"react-bootstrap/Button\";\n\nconst { uuid } = require('uuidv4');\n\nfunction MatchMaking ( ) {\n\n    const dispatch = useDispatch();\n\n    const currentUser = useSelector( state => state.currentUser );\n\n    const gamestate = useSelector( state => state.gamestate );\n\n    const [ values, setValues ] = useState( {\n        myCode: \"\",\n        theirCode: \"\"\n    } );\n\n    const handleChange = prop => event => {\n        setValues({...values, [prop]: event.target.value});\n    };\n\n    const makeLobby = () => {\n\n        const session_id = uuid();\n\n        console.log(session_id);\n\n        setValues( { ...values, myCode: session_id } );\n\n        dispatch( setSessionID( session_id ) );\n\n        dispatch( createLobby( { session_id: session_id, user_id: currentUser.uid } ) );\n\n    };\n\n    const enterLobby = () => {\n\n        const session_id = values[ 'theirCode' ];\n\n        dispatch( joinLobby( { session_id: session_id, user_id: currentUser.uid } ) );\n\n        dispatch( setSessionID( session_id ) );\n\n    };\n\n    const containerStyles = {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        height: '40vh',\n        margin: 'auto'\n    };\n\n    const inputStyles = {\n        width: '500px',\n        height: '32px',\n        fontSize: '24px',\n    };\n\n    return(\n        <div style={ containerStyles }>\n            { gamestate && <Redirect to={ '/battle' } /> }\n            <div>\n                <Button variant=\"danger\" onClick={ () => makeLobby() }>Create Lobby</Button>\n                <input style={ inputStyles } type=\"disabled\" value={ values.myCode } placeholder={\"Share This Code\"}/>\n            </div>\n\n            <div>\n                <input style={ inputStyles } placeholder={ \" Paste Code Here\" }  onChange={ handleChange(\"theirCode\" ) }/>\n                <Button variant=\"danger\" onClick={ () => enterLobby() } >Join Lobby</Button><br/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default MatchMaking;\n","import React from 'react';\n\nfunction CoverPage () {\n\n    const containerStyles = {\n        width: '100vw',\n        height: '50%',\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        textAlign: 'center',\n        flexDirection: 'column'\n    };\n\n    return(\n        <div style={ containerStyles }>\n            <span style={ { fontSize: '64px' } }>Pokemon Battle Simulator</span>\n            <span style={ { fontSize: '48px' } }>Sign in to play!</span>\n        </div>\n    );\n\n}\n\nexport default CoverPage;\n","import firebase from 'firebase';\nimport axios from 'axios';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyByBIqKfdI1Dc_QZ_LCAQvjQo8ijJxtcoc\",\n    authDomain: \"pokemon-412.firebaseapp.com\",\n    databaseURL: \"https://pokemon-412.firebaseio.com\",\n    projectId: \"pokemon-412\",\n    storageBucket: \"pokemon-412.appspot.com\",\n    messagingSenderId: \"182425498567\",\n    appId: \"1:182425498567:web:f43bb45768845944eb9fe2\",\n    measurementId: \"G-NMGDW4C92Q\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp( firebaseConfig );\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport const signInWithGoogle = () => {\n\n    auth.signInWithRedirect( provider );\n};\n\nexport const auth = firebase.auth();\n","import React, { useState, useEffect, createContext } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink,\n    Redirect\n} from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.css';\n\nimport PartyList from './components/PartyList'\nimport BattlePage from './components/BattlePage'\nimport MatchMaking from './components/MatchMaking'\nimport CoverPage from './components/CoverPage'\nimport { auth, signInWithGoogle } from \"./auth/fire\";\n\nimport { setCurrentUser } from './redux/actions/setActions';\nimport axios from \"axios\";\n\nexport const AuthContext = createContext( null );\n\nfunction App() {\n\n    const dispatch = useDispatch();\n\n    const [ loggedIn, setLoggedIn ] = useState( false );\n\n    const [ currentUser, setCurrentUserInState ] = useState( false );\n\n    const generatePartyForNewUser = user_id => {\n\n        axios({\n            method: 'post',\n            url: 'https://us-central1-pokemon-412.cloudfunctions.net/generate-party',\n            data: { user_id: user_id },\n            headers: { 'crossDomain': 'true' }\n        });\n    };\n\n    useEffect( () => {\n\n        document.body.style.height = \"90vh\";\n\n        auth.onAuthStateChanged(  user => {\n            if ( user ) {\n\n                if (user.metadata.creationTime === user.metadata.lastSignInTime) {\n                    generatePartyForNewUser( user.uid );\n                }\n\n                console.log(user);\n                setCurrentUserInState( user );\n                dispatch( setCurrentUser( user ) );\n                setLoggedIn( true );\n\n            } else {\n\n                setCurrentUserInState( null );\n                dispatch( setCurrentUser( null ) );\n                setLoggedIn( false );\n            }\n        });\n    }, [ loggedIn ]);\n\n    const containerStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100%',\n        alignItems: 'center',\n    };\n\n    const navStyles = {\n        width: '30vw',\n        height: '60px',\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        backgroundColor: 'gray'\n    };\n\n    return (\n        <AuthContext.Provider value={ { loggedIn, setLoggedIn } }>\n\n            <Router>\n\n                <div style={ navStyles }>\n                    { !loggedIn ?\n                        <Button variant=\"danger\" onClick={ () => signInWithGoogle() }>Sign In</Button>\n                        : <Button variant=\"danger\" onClick={ () => auth.signOut() }>Sign Out</Button> }\n                    { loggedIn && <NavLink to={ '/party' }><Button variant=\"danger\">Party</Button></NavLink> }\n                    { loggedIn && <NavLink to={ '/match' }><Button variant=\"danger\">Battle</Button></NavLink> }\n                </div>\n\n                <Switch>\n                    <div className=\"App\" style={ containerStyles } >\n\n                        <Route path=\"/\" exact component={ CoverPage }>\n                            { loggedIn && <Redirect to={ '/party' }/> }\n                        </Route>\n\n                        <Route path=\"/match\" component={ MatchMaking }>\n                            { !loggedIn && <Redirect to={ '/' }/> }\n                        </Route>\n\n                        <Route path=\"/party\" component={ PartyList }>\n                            { !loggedIn && <Redirect to={ '/' }/> }\n                        </Route>\n\n                        <Route path=\"/battle\" component={ BattlePage }>\n                            { !loggedIn && <Redirect to={ '/' }/> }\n                        </Route>\n\n                    </div>\n                </Switch>\n            </Router>\n\n        </AuthContext.Provider>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/reducers\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport socketIO from 'socket.io-client';\nimport socketIoMiddleware from 'redux-socket.io-middleware';\nimport { applyMiddleware, createStore } from 'redux'\n\n//import BrowserRouter from 'react-router-dom/BrowserRouter'\n//https://stackoverflow.com/questions/54427793/getting-blank-page-after-react-app-publish-in-github\nconst socket = socketIO.connect('localhost:8080');\n\nconst store = createStore( rootReducer, applyMiddleware( socketIoMiddleware( socket ) ) );\n\ndocument.getElementById('root').style.height = '100%';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}